{"version":3,"sources":["webpack:///./src/components/rfpm/services/security/UserService.js","webpack:///./src/components/rfvue/beans/Limit.js","webpack:///./src/components/rfvue/service/basecrudservice/BaseCrudService.js"],"names":["UserService","RFPMConstantsService","BASE_HOST","PATH_SERVICE_USER","pathEditProfile","dataUserProfile","body","data","this","sendFetchRequest","getRealPathHost","JSON","stringify","BaseCrudService","Limit","start","end","baseHost","pathService","pathEdit","pathAdd","pathDelete","pathList","pathRead","pathLoadNew","pathLCount","pathLListOnlyFields","base","filters","fetchs","orders","limits","fields","filterFind","mapProperties","entity","CommonsUtils","isNotNull","push","list","response","VueContext","isElectronApp","parse","statusProp","jsonProp","listEntities","arrayNotNull","status","json","isNull","loadNew","BaseService"],"mappings":"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","file":"js/chunk-e87baf3c.43ff91f0.js","sourcesContent":["import BaseCrudService from \"../../../rfvue/service/basecrudservice/BaseCrudService\";\r\nimport RFPMConstantsService from \"../../constants/RFPMConstantsService\";\r\n/**\r\n * Services for user\r\n */\r\nexport default class UserService extends BaseCrudService {\r\n  constructor() {\r\n    super(\r\n      RFPMConstantsService.BASE_HOST,\r\n      RFPMConstantsService.PATH_SERVICE_USER\r\n    );\r\n    this.pathEditProfile = \"/editUserProfile\";\r\n  }\r\n\r\n  /**\r\n   * Method for edit user profile\r\n   * @param {*} dataUserProfile\r\n   */\r\n  editUserProfile(dataUserProfile) {\r\n    const body = { data: dataUserProfile };\r\n    return this.sendFetchRequest(\r\n      this.getRealPathHost() + this.pathEditProfile,\r\n      JSON.stringify(body),\r\n      null\r\n    );\r\n  }\r\n}\r\n","/**\r\n * Class to limit data for search query in database\r\n */\r\nexport default class Limit {\r\n  start;\r\n  end;\r\n\r\n  constructor(start, end) {\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n}\r\n","import BaseService from \"../baseservice/BaseService\";\r\nimport CommonsUtils from \"../../utils/CommonsUtils\";\r\nimport Limit from \"../../beans/Limit\";\r\nimport VueContext from \"../../context/VueContext\";\r\n/**\r\n * Base class service for crud operations\r\n */\r\nexport default class BaseCrudService extends BaseService {\r\n  constructor(baseHost, pathService) {\r\n    super(baseHost, pathService);\r\n    this.pathEdit = \"/edit\";\r\n    this.pathAdd = \"/add\";\r\n    this.pathDelete = \"/delete\";\r\n    this.pathList = \"/list\";\r\n    this.pathRead = \"/read\";\r\n    this.pathLoadNew = \"/loadNew\";\r\n    this.pathLCount = \"/count\";\r\n    this.pathLListOnlyFields = \"/listOnlyFields\";\r\n  }\r\n\r\n  /**\r\n   * Method for edit data\r\n   * @param {*} base is base data for edit\r\n   */\r\n  async edit(base) {\r\n    const body = { data: base };\r\n    return this.sendFetchRequest(\r\n      this.getRealPathHost() + this.pathEdit,\r\n      JSON.stringify(body),\r\n      null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Method for add data\r\n   * @param {*} base is base data for add\r\n   */\r\n  async add(base) {\r\n    const body = { data: base };\r\n    return this.sendFetchRequest(\r\n      this.getRealPathHost() + this.pathAdd,\r\n      JSON.stringify(body),\r\n      null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Method for delte data\r\n   * @param {*} base is base data for delete\r\n   */\r\n  async delete(base) {\r\n    const body = { data: base };\r\n    return this.sendFetchRequest(\r\n      this.getRealPathHost() + this.pathDelete,\r\n      JSON.stringify(body),\r\n      null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Method for read data\r\n   * @param {*} base is base data for read\r\n   */\r\n  async read(base) {\r\n    const body = { data: base };\r\n    return this.sendFetchRequest(\r\n      this.getRealPathHost() + this.pathRead,\r\n      JSON.stringify(body),\r\n      null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Method for load new entity\r\n   */\r\n  async loadNew() {\r\n    return this.sendFetchRequest(\r\n      this.getRealPathHost() + this.pathLoadNew,\r\n      JSON.stringify({}),\r\n      null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Method for list data\r\n   * @param {*} filters for list\r\n   * @param {*} fetchs for list\r\n   * @param {*} orders for list\r\n   * @param {*} limits for list\r\n   */\r\n  async list(filters, fetchs, orders, limits) {\r\n    const body = {\r\n      filters: filters,\r\n      fetchs: fetchs,\r\n      orders: orders,\r\n      limits: limits,\r\n    };\r\n    return this.sendFetchRequest(\r\n      this.getRealPathHost() + this.pathList,\r\n      JSON.stringify(body),\r\n      null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * List data only fields\r\n   * @param {*} fields for list\r\n   * @param {*} filters for list\r\n   * @param {*} fetchs for list\r\n   * @param {*} orders for list\r\n   * @param {*} limits for list\r\n   */\r\n  async listOnlyFields(fields, filters, fetchs, orders, limits) {\r\n    const body = {\r\n      fields: fields,\r\n      filters: filters,\r\n      fetchs: fetchs,\r\n      orders: orders,\r\n      limits: limits,\r\n    };\r\n    return this.sendFetchRequest(\r\n      this.getRealPathHost() + this.pathLListOnlyFields,\r\n      JSON.stringify(body),\r\n      null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Method for count\r\n   * @param {*} filters for count\r\n   * @param {*} orders for count\r\n   * @param {*} limits for count\r\n   */\r\n  async count(filters, orders, limits) {\r\n    const body = { filters: filters, orders: orders, limits: limits };\r\n    return this.sendFetchRequest(\r\n      this.getRealPathHost() + this.pathLCount,\r\n      JSON.stringify(body),\r\n      null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Method to find entity in search actions example inputs\r\n   * @param filterFind filterFind for find in entity\r\n   * @param mapProperties map properties in entity\r\n   */\r\n  async findEntitySearch(filterFind, mapProperties) {\r\n    let entity = null;\r\n\r\n    if (CommonsUtils.isNotNull(filterFind)) {\r\n      let filters = [];\r\n      filters.push(filterFind);\r\n\r\n      let fetchs = null;\r\n\r\n      if (\r\n        CommonsUtils.isNotNull(mapProperties) &&\r\n        CommonsUtils.isNotNull(mapProperties[\"filters\"])\r\n      ) {\r\n        filters = mapProperties[\"filters\"];\r\n      }\r\n\r\n      if (\r\n        CommonsUtils.isNotNull(mapProperties) &&\r\n        CommonsUtils.isNotNull(mapProperties[\"fetchs\"])\r\n      ) {\r\n        fetchs = mapProperties[\"fetchs\"];\r\n      }\r\n\r\n      let response = await this.list(filters, fetchs, null, new Limit(0, 1));\r\n\r\n      if (VueContext.isElectronApp()) {\r\n        response = JSON.parse(response);\r\n        if (CommonsUtils.isNotNull(response) && response.statusProp === 200) {\r\n          let body = response.jsonProp;\r\n          const listEntities = body[\"data\"];\r\n          if (CommonsUtils.arrayNotNull(listEntities)) {\r\n            entity = listEntities[0];\r\n          }\r\n        }\r\n      } else {\r\n        if (CommonsUtils.isNotNull(response) && response.status === 200) {\r\n          let body = await response.json();\r\n          const listEntities = body[\"data\"];\r\n          if (CommonsUtils.arrayNotNull(listEntities)) {\r\n            entity = listEntities[0];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // If entity is null load new\r\n    if (CommonsUtils.isNull(entity)) {\r\n      let response = await this.loadNew();\r\n      if (VueContext.isElectronApp()) {\r\n        response = JSON.parse(response);\r\n        if (CommonsUtils.isNotNull(response) && response.statusProp === 200) {\r\n          let body = response.jsonProp;\r\n          entity = body[\"data\"];\r\n        }\r\n      } else {\r\n        if (CommonsUtils.isNotNull(response) && response.status === 200) {\r\n          let body = await response.json();\r\n          entity = body[\"data\"];\r\n        }\r\n      }\r\n    }\r\n\r\n    return entity;\r\n  }\r\n}\r\n"],"sourceRoot":""}